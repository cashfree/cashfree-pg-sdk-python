# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2023-08-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr
from cashfree_pg.models.create_subscription_request_authorization_details import CreateSubscriptionRequestAuthorizationDetails
from cashfree_pg.models.create_subscription_request_plan_details import CreateSubscriptionRequestPlanDetails
from cashfree_pg.models.create_subscription_request_subscription_meta import CreateSubscriptionRequestSubscriptionMeta
from cashfree_pg.models.subscription_customer_details import SubscriptionCustomerDetails
from cashfree_pg.models.subscription_payment_split_item import SubscriptionPaymentSplitItem

class CreateSubscriptionRequest(BaseModel):
    """
    Request body to create a new subscription.
    """
    subscription_id: constr(strict=True, max_length=250, min_length=1) = Field(..., description="A unique ID for the subscription. It can include alphanumeric characters, underscore, dot, hyphen, and space. Maximum characters allowed is 250.")
    customer_details: SubscriptionCustomerDetails = Field(...)
    plan_details: CreateSubscriptionRequestPlanDetails = Field(...)
    authorization_details: Optional[CreateSubscriptionRequestAuthorizationDetails] = None
    subscription_meta: Optional[CreateSubscriptionRequestSubscriptionMeta] = None
    subscription_expiry_time: Optional[StrictStr] = Field(None, description="Expiry date for the subscription.")
    subscription_first_charge_time: Optional[StrictStr] = Field(None, description="Time at which the first charge will be made for the subscription after authorization. Applicable only for PERIODIC plans.")
    subscription_note: Optional[StrictStr] = Field(None, description="Note for the subscription.")
    subscription_tags: Optional[Dict[str, Any]] = Field(None, description="Tags for the subscription.")
    subscription_payment_splits: Optional[conlist(SubscriptionPaymentSplitItem)] = Field(None, description="Payment splits for the subscription.")
    __properties = ["subscription_id", "customer_details", "plan_details", "authorization_details", "subscription_meta", "subscription_expiry_time", "subscription_first_charge_time", "subscription_note", "subscription_tags", "subscription_payment_splits"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateSubscriptionRequest:
        """Create an instance of CreateSubscriptionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> CreateSubscriptionRequest:
        """Create an instance of CreateSubscriptionRequest from a JSON string"""
        temp_dict = json.loads(json_str)
        if "subscription_id, customer_details, plan_details, authorization_details, subscription_meta, subscription_expiry_time, subscription_first_charge_time, subscription_note, subscription_tags, subscription_payment_splits" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of customer_details
        if self.customer_details:
            _dict['customer_details'] = self.customer_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of plan_details
        if self.plan_details:
            _dict['plan_details'] = self.plan_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of authorization_details
        if self.authorization_details:
            _dict['authorization_details'] = self.authorization_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription_meta
        if self.subscription_meta:
            _dict['subscription_meta'] = self.subscription_meta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subscription_payment_splits (list)
        _items = []
        if self.subscription_payment_splits:
            for _item in self.subscription_payment_splits:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subscription_payment_splits'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateSubscriptionRequest:
        """Create an instance of CreateSubscriptionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateSubscriptionRequest.parse_obj(obj)

        _obj = CreateSubscriptionRequest.parse_obj({
            "subscription_id": obj.get("subscription_id"),
            "customer_details": SubscriptionCustomerDetails.from_dict(obj.get("customer_details")) if obj.get("customer_details") is not None else None,
            "plan_details": CreateSubscriptionRequestPlanDetails.from_dict(obj.get("plan_details")) if obj.get("plan_details") is not None else None,
            "authorization_details": CreateSubscriptionRequestAuthorizationDetails.from_dict(obj.get("authorization_details")) if obj.get("authorization_details") is not None else None,
            "subscription_meta": CreateSubscriptionRequestSubscriptionMeta.from_dict(obj.get("subscription_meta")) if obj.get("subscription_meta") is not None else None,
            "subscription_expiry_time": obj.get("subscription_expiry_time"),
            "subscription_first_charge_time": obj.get("subscription_first_charge_time"),
            "subscription_note": obj.get("subscription_note"),
            "subscription_tags": obj.get("subscription_tags"),
            "subscription_payment_splits": [SubscriptionPaymentSplitItem.from_dict(_item) for _item in obj.get("subscription_payment_splits")] if obj.get("subscription_payment_splits") is not None else None
        })
        return _obj


