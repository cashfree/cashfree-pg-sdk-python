# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2023-08-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, conlist
from cashfree_pg.models.transfer_details_tags_inner import TransferDetailsTagsInner

class TransferDetails(BaseModel):
    """
    TransferDetails
    """
    vendor_id: Optional[StrictStr] = None
    transfer_from: Optional[StrictStr] = None
    transfer_type: Optional[StrictStr] = None
    transfer_amount: Optional[Union[StrictFloat, StrictInt]] = None
    remark: Optional[StrictStr] = None
    tags: Optional[conlist(TransferDetailsTagsInner)] = None
    __properties = ["vendor_id", "transfer_from", "transfer_type", "transfer_amount", "remark", "tags"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TransferDetails:
        """Create an instance of TransferDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> TransferDetails:
        """Create an instance of TransferDetails from a JSON string"""
        temp_dict = json.loads(json_str)
        if "vendor_id, transfer_from, transfer_type, transfer_amount, remark, tags" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TransferDetails:
        """Create an instance of TransferDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TransferDetails.parse_obj(obj)

        _obj = TransferDetails.parse_obj({
            "vendor_id": obj.get("vendor_id"),
            "transfer_from": obj.get("transfer_from"),
            "transfer_type": obj.get("transfer_type"),
            "transfer_amount": obj.get("transfer_amount"),
            "remark": obj.get("remark"),
            "tags": [TransferDetailsTagsInner.from_dict(_item) for _item in obj.get("tags")] if obj.get("tags") is not None else None
        })
        return _obj


