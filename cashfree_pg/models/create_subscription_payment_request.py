# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2023-08-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class CreateSubscriptionPaymentRequest(BaseModel):
    """
    The request to be passed for the create subscription payment API.
    """
    subscription_id: StrictStr = Field(..., description="A unique ID passed by merchant for identifying the subscription.")
    subscription_session_id: Optional[StrictStr] = Field(None, description="Session ID for the subscription. Required only for Auth.")
    payment_id: StrictStr = Field(..., description="A unique ID passed by merchant for identifying the subscription payment.")
    payment_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The charge amount of the payment. Requried in case of charge.")
    payment_schedule_date: Optional[StrictStr] = Field(None, description="The date on which the payment is scheduled to be processed. Required for UPI and CARD payment modes.")
    payment_remarks: Optional[StrictStr] = Field(None, description="Payment remarks.")
    payment_type: StrictStr = Field(..., description="Payment type. Can be AUTH or CHARGE.")
    payment_method: Optional[StrictStr] = Field(None, description="Payment method. Can be upi or card or enach or pnach.")
    __properties = ["subscription_id", "subscription_session_id", "payment_id", "payment_amount", "payment_schedule_date", "payment_remarks", "payment_type", "payment_method"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateSubscriptionPaymentRequest:
        """Create an instance of CreateSubscriptionPaymentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> CreateSubscriptionPaymentRequest:
        """Create an instance of CreateSubscriptionPaymentRequest from a JSON string"""
        temp_dict = json.loads(json_str)
        if "subscription_id, subscription_session_id, payment_id, payment_amount, payment_schedule_date, payment_remarks, payment_type, payment_method" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateSubscriptionPaymentRequest:
        """Create an instance of CreateSubscriptionPaymentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateSubscriptionPaymentRequest.parse_obj(obj)

        _obj = CreateSubscriptionPaymentRequest.parse_obj({
            "subscription_id": obj.get("subscription_id"),
            "subscription_session_id": obj.get("subscription_session_id"),
            "payment_id": obj.get("payment_id"),
            "payment_amount": obj.get("payment_amount"),
            "payment_schedule_date": obj.get("payment_schedule_date"),
            "payment_remarks": obj.get("payment_remarks"),
            "payment_type": obj.get("payment_type"),
            "payment_method": obj.get("payment_method")
        })
        return _obj


