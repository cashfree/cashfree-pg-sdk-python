# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2023-08-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist

class ShipmentDetails(BaseModel):
    """
    Shipment details associated with shipping of order like tracking company, tracking number,tracking urls etc.
    """
    tracking_company: StrictStr = Field(..., description="Tracking company name associated with order.")
    tracking_urls: conlist(StrictStr) = Field(..., description="Tracking Urls associated with order.")
    tracking_numbers: conlist(StrictStr) = Field(..., description="Tracking Numbers associated with order.")
    __properties = ["tracking_company", "tracking_urls", "tracking_numbers"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ShipmentDetails:
        """Create an instance of ShipmentDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> ShipmentDetails:
        """Create an instance of ShipmentDetails from a JSON string"""
        temp_dict = json.loads(json_str)
        if "tracking_company, tracking_urls, tracking_numbers" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ShipmentDetails:
        """Create an instance of ShipmentDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ShipmentDetails.parse_obj(obj)

        _obj = ShipmentDetails.parse_obj({
            "tracking_company": obj.get("tracking_company"),
            "tracking_urls": obj.get("tracking_urls"),
            "tracking_numbers": obj.get("tracking_numbers")
        })
        return _obj


