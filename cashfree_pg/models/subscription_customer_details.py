# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2023-08-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class SubscriptionCustomerDetails(BaseModel):
    """
    Subscription customer details.
    """
    customer_name: Optional[StrictStr] = Field(None, description="Name of the customer.")
    customer_email: StrictStr = Field(..., description="Email of the customer.")
    customer_phone: StrictStr = Field(..., description="Phone number of the customer.")
    customer_bank_account_holder_name: Optional[StrictStr] = Field(None, description="Bank holder name of the customer.")
    customer_bank_account_number: Optional[StrictStr] = Field(None, description="Bank account number of the customer.")
    customer_bank_ifsc: Optional[StrictStr] = Field(None, description="IFSC code of the customer.")
    customer_bank_code: Optional[StrictStr] = Field(None, description="Bank code of the customer. Refer to https://www.npci.org.in/PDF/nach/live-members-e-mandates/Live-Banks-in-API-E-Mandate.pdf")
    customer_bank_account_type: Optional[StrictStr] = Field(None, description="Bank account type of the customer.")
    __properties = ["customer_name", "customer_email", "customer_phone", "customer_bank_account_holder_name", "customer_bank_account_number", "customer_bank_ifsc", "customer_bank_code", "customer_bank_account_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SubscriptionCustomerDetails:
        """Create an instance of SubscriptionCustomerDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> SubscriptionCustomerDetails:
        """Create an instance of SubscriptionCustomerDetails from a JSON string"""
        temp_dict = json.loads(json_str)
        if "customer_name, customer_email, customer_phone, customer_bank_account_holder_name, customer_bank_account_number, customer_bank_ifsc, customer_bank_code, customer_bank_account_type" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SubscriptionCustomerDetails:
        """Create an instance of SubscriptionCustomerDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SubscriptionCustomerDetails.parse_obj(obj)

        _obj = SubscriptionCustomerDetails.parse_obj({
            "customer_name": obj.get("customer_name"),
            "customer_email": obj.get("customer_email"),
            "customer_phone": obj.get("customer_phone"),
            "customer_bank_account_holder_name": obj.get("customer_bank_account_holder_name"),
            "customer_bank_account_number": obj.get("customer_bank_account_number"),
            "customer_bank_ifsc": obj.get("customer_bank_ifsc"),
            "customer_bank_code": obj.get("customer_bank_code"),
            "customer_bank_account_type": obj.get("customer_bank_account_type")
        })
        return _obj


