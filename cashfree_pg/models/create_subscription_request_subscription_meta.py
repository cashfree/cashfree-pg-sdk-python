# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2023-08-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class CreateSubscriptionRequestSubscriptionMeta(BaseModel):
    """
    CreateSubscriptionRequestSubscriptionMeta
    """
    return_url: Optional[StrictStr] = Field(None, description="The url to redirect after checkout.")
    notification_channel: Optional[conlist(StrictStr)] = Field(None, description="Notification channel for the subscription. SMS, EMAIL are possible values.")
    __properties = ["return_url", "notification_channel"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateSubscriptionRequestSubscriptionMeta:
        """Create an instance of CreateSubscriptionRequestSubscriptionMeta from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> CreateSubscriptionRequestSubscriptionMeta:
        """Create an instance of CreateSubscriptionRequestSubscriptionMeta from a JSON string"""
        temp_dict = json.loads(json_str)
        if "return_url, notification_channel" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateSubscriptionRequestSubscriptionMeta:
        """Create an instance of CreateSubscriptionRequestSubscriptionMeta from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateSubscriptionRequestSubscriptionMeta.parse_obj(obj)

        _obj = CreateSubscriptionRequestSubscriptionMeta.parse_obj({
            "return_url": obj.get("return_url"),
            "notification_channel": obj.get("notification_channel")
        })
        return _obj


