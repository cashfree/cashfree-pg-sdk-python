# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2023-08-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class SubscriptionBankDetails(BaseModel):
    """
    Bank details object
    """
    bank_id: Optional[StrictStr] = Field(None, description="ID of the bank.")
    bank_name: Optional[StrictStr] = Field(None, description="Name of the bank.")
    account_auth_modes: Optional[conlist(StrictStr)] = Field(None, description="List of account authentication modes supported by the bank. (e.g. DEBIT_CARD, NET_BANKING, AADHAAR)")
    __properties = ["bank_id", "bank_name", "account_auth_modes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SubscriptionBankDetails:
        """Create an instance of SubscriptionBankDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> SubscriptionBankDetails:
        """Create an instance of SubscriptionBankDetails from a JSON string"""
        temp_dict = json.loads(json_str)
        if "bank_id, bank_name, account_auth_modes" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SubscriptionBankDetails:
        """Create an instance of SubscriptionBankDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SubscriptionBankDetails.parse_obj(obj)

        _obj = SubscriptionBankDetails.parse_obj({
            "bank_id": obj.get("bank_id"),
            "bank_name": obj.get("bank_name"),
            "account_auth_modes": obj.get("account_auth_modes")
        })
        return _obj


