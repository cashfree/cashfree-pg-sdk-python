# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2023-08-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from cashfree_pg.models.cart_item import CartItem

class CartDetails(BaseModel):
    """
    The cart details that are necessary like shipping address, billing address and more.
    """
    shipping_charge: Optional[Union[StrictFloat, StrictInt]] = None
    cart_name: Optional[StrictStr] = Field(None, description="Name of the cart.")
    cart_items: Optional[conlist(CartItem)] = None
    __properties = ["shipping_charge", "cart_name", "cart_items"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CartDetails:
        """Create an instance of CartDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> CartDetails:
        """Create an instance of CartDetails from a JSON string"""
        temp_dict = json.loads(json_str)
        if "shipping_charge, cart_name, cart_items" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in cart_items (list)
        _items = []
        if self.cart_items:
            for _item in self.cart_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['cart_items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CartDetails:
        """Create an instance of CartDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CartDetails.parse_obj(obj)

        _obj = CartDetails.parse_obj({
            "shipping_charge": obj.get("shipping_charge"),
            "cart_name": obj.get("cart_name"),
            "cart_items": [CartItem.from_dict(_item) for _item in obj.get("cart_items")] if obj.get("cart_items") is not None else None
        })
        return _obj


