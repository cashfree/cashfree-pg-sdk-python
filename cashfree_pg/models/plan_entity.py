# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2023-08-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class PlanEntity(BaseModel):
    """
    The response returned for Get, Create and Manage Plan APIs
    """
    plan_currency: Optional[StrictStr] = Field(None, description="Currency for the plan.")
    plan_id: Optional[StrictStr] = Field(None, description="Plan ID provided by merchant.")
    plan_interval_type: Optional[StrictStr] = Field(None, description="Interval type for the plan.")
    plan_intervals: Optional[StrictInt] = Field(None, description="Number of intervals for the plan.")
    plan_max_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Maximum amount for the plan.")
    plan_max_cycles: Optional[StrictInt] = Field(None, description="Maximum number of payment cycles for the plan.")
    plan_name: Optional[StrictStr] = Field(None, description="Name of the plan.")
    plan_note: Optional[StrictStr] = Field(None, description="Note for the plan.")
    plan_recurring_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Recurring amount for the plan.")
    plan_status: Optional[StrictStr] = Field(None, description="Status of the plan.")
    plan_type: Optional[StrictStr] = Field(None, description="Type of the plan.")
    __properties = ["plan_currency", "plan_id", "plan_interval_type", "plan_intervals", "plan_max_amount", "plan_max_cycles", "plan_name", "plan_note", "plan_recurring_amount", "plan_status", "plan_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlanEntity:
        """Create an instance of PlanEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> PlanEntity:
        """Create an instance of PlanEntity from a JSON string"""
        temp_dict = json.loads(json_str)
        if "plan_currency, plan_id, plan_interval_type, plan_intervals, plan_max_amount, plan_max_cycles, plan_name, plan_note, plan_recurring_amount, plan_status, plan_type" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlanEntity:
        """Create an instance of PlanEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlanEntity.parse_obj(obj)

        _obj = PlanEntity.parse_obj({
            "plan_currency": obj.get("plan_currency"),
            "plan_id": obj.get("plan_id"),
            "plan_interval_type": obj.get("plan_interval_type"),
            "plan_intervals": obj.get("plan_intervals"),
            "plan_max_amount": obj.get("plan_max_amount"),
            "plan_max_cycles": obj.get("plan_max_cycles"),
            "plan_name": obj.get("plan_name"),
            "plan_note": obj.get("plan_note"),
            "plan_recurring_amount": obj.get("plan_recurring_amount"),
            "plan_status": obj.get("plan_status"),
            "plan_type": obj.get("plan_type")
        })
        return _obj


