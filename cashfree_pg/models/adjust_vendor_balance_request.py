# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2023-08-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class AdjustVendorBalanceRequest(BaseModel):
    """
    Adjust Vendor Balance Request
    """
    transfer_from: StrictStr = Field(..., description="Mention to whom you want to transfer the on demand balance. Possible values - MERCHANT, VENDOR.")
    transfer_type: StrictStr = Field(..., description="Mention the type of transfer. Possible values: ON_DEMAND.")
    transfer_amount: Union[StrictFloat, StrictInt] = Field(..., description="Mention the on demand transfer amount.")
    remark: Optional[StrictStr] = Field(None, description="Mention remarks if any for the on demand transfer.")
    tags: Optional[Dict[str, Any]] = Field(None, description="Provide additional data fields using tags.")
    __properties = ["transfer_from", "transfer_type", "transfer_amount", "remark", "tags"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AdjustVendorBalanceRequest:
        """Create an instance of AdjustVendorBalanceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> AdjustVendorBalanceRequest:
        """Create an instance of AdjustVendorBalanceRequest from a JSON string"""
        temp_dict = json.loads(json_str)
        if "transfer_from, transfer_type, transfer_amount, remark, tags" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdjustVendorBalanceRequest:
        """Create an instance of AdjustVendorBalanceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AdjustVendorBalanceRequest.parse_obj(obj)

        _obj = AdjustVendorBalanceRequest.parse_obj({
            "transfer_from": obj.get("transfer_from"),
            "transfer_type": obj.get("transfer_type"),
            "transfer_amount": obj.get("transfer_amount"),
            "remark": obj.get("remark"),
            "tags": obj.get("tags")
        })
        return _obj


