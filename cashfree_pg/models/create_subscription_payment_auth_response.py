# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2023-08-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from cashfree_pg.models.create_subscription_payment_auth_response_failure_details import CreateSubscriptionPaymentAuthResponseFailureDetails

class CreateSubscriptionPaymentAuthResponse(BaseModel):
    """
    The response returned in Get, Create or Manage Subscription Payment APIs.
    """
    cf_payment_id: Optional[StrictStr] = Field(None, description="Cashfree subscription payment reference number")
    cf_subscription_id: Optional[StrictStr] = Field(None, description="Cashfree subscription reference number")
    failure_details: Optional[CreateSubscriptionPaymentAuthResponseFailureDetails] = None
    payment_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The charge amount of the payment.")
    payment_id: Optional[StrictStr] = Field(None, description="A unique ID passed by merchant for identifying the transaction.")
    payment_initiated_date: Optional[StrictStr] = Field(None, description="The date on which the payment was initiated.")
    payment_status: Optional[StrictStr] = Field(None, description="Status of the payment.")
    payment_type: Optional[StrictStr] = Field(None, description="Payment type. Can be AUTH or CHARGE.")
    subscription_id: Optional[StrictStr] = Field(None, description="A unique ID passed by merchant for identifying the subscription.")
    payment_method: Optional[StrictStr] = Field(None, description="Payment method used for the authorization.")
    __properties = ["cf_payment_id", "cf_subscription_id", "failure_details", "payment_amount", "payment_id", "payment_initiated_date", "payment_status", "payment_type", "subscription_id", "payment_method"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateSubscriptionPaymentAuthResponse:
        """Create an instance of CreateSubscriptionPaymentAuthResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> CreateSubscriptionPaymentAuthResponse:
        """Create an instance of CreateSubscriptionPaymentAuthResponse from a JSON string"""
        temp_dict = json.loads(json_str)
        if "cf_payment_id, cf_subscription_id, failure_details, payment_amount, payment_id, payment_initiated_date, payment_status, payment_type, subscription_id, payment_method" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of failure_details
        if self.failure_details:
            _dict['failure_details'] = self.failure_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateSubscriptionPaymentAuthResponse:
        """Create an instance of CreateSubscriptionPaymentAuthResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateSubscriptionPaymentAuthResponse.parse_obj(obj)

        _obj = CreateSubscriptionPaymentAuthResponse.parse_obj({
            "cf_payment_id": obj.get("cf_payment_id"),
            "cf_subscription_id": obj.get("cf_subscription_id"),
            "failure_details": CreateSubscriptionPaymentAuthResponseFailureDetails.from_dict(obj.get("failure_details")) if obj.get("failure_details") is not None else None,
            "payment_amount": obj.get("payment_amount"),
            "payment_id": obj.get("payment_id"),
            "payment_initiated_date": obj.get("payment_initiated_date"),
            "payment_status": obj.get("payment_status"),
            "payment_type": obj.get("payment_type"),
            "subscription_id": obj.get("subscription_id"),
            "payment_method": obj.get("payment_method")
        })
        return _obj


