# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2023-08-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from cashfree_pg.models.address_details import AddressDetails
from cashfree_pg.models.charges_entity import ChargesEntity
from cashfree_pg.models.extended_cart_details import ExtendedCartDetails
from cashfree_pg.models.extended_customer_details import ExtendedCustomerDetails
from cashfree_pg.models.offer_extended_details import OfferExtendedDetails

class OrderExtendedDataEntity(BaseModel):
    """
    The complete order extended data entity
    """
    cf_order_id: Optional[StrictStr] = Field(None, description="unique id generated by cashfree for your order")
    order_id: Optional[StrictStr] = Field(None, description="order_id sent during the api request")
    order_amount: Optional[Union[StrictFloat, StrictInt]] = None
    order_currency: Optional[StrictStr] = Field(None, description="Currency of the order. Example INR")
    created_at: Optional[datetime] = Field(None, description="When the order was created at cashfree's server")
    charges: Optional[ChargesEntity] = None
    customer_details: Optional[ExtendedCustomerDetails] = None
    shipping_address: Optional[AddressDetails] = None
    billing_address: Optional[AddressDetails] = None
    cart: Optional[ExtendedCartDetails] = None
    offer: Optional[OfferExtendedDetails] = None
    __properties = ["cf_order_id", "order_id", "order_amount", "order_currency", "created_at", "charges", "customer_details", "shipping_address", "billing_address", "cart", "offer"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderExtendedDataEntity:
        """Create an instance of OrderExtendedDataEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> OrderExtendedDataEntity:
        """Create an instance of OrderExtendedDataEntity from a JSON string"""
        temp_dict = json.loads(json_str)
        if "cf_order_id, order_id, order_amount, order_currency, created_at, charges, customer_details, shipping_address, billing_address, cart, offer" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of charges
        if self.charges:
            _dict['charges'] = self.charges.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_details
        if self.customer_details:
            _dict['customer_details'] = self.customer_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shipping_address'] = self.shipping_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billing_address'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cart
        if self.cart:
            _dict['cart'] = self.cart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of offer
        if self.offer:
            _dict['offer'] = self.offer.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderExtendedDataEntity:
        """Create an instance of OrderExtendedDataEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderExtendedDataEntity.parse_obj(obj)

        _obj = OrderExtendedDataEntity.parse_obj({
            "cf_order_id": obj.get("cf_order_id"),
            "order_id": obj.get("order_id"),
            "order_amount": obj.get("order_amount"),
            "order_currency": obj.get("order_currency"),
            "created_at": obj.get("created_at"),
            "charges": ChargesEntity.from_dict(obj.get("charges")) if obj.get("charges") is not None else None,
            "customer_details": ExtendedCustomerDetails.from_dict(obj.get("customer_details")) if obj.get("customer_details") is not None else None,
            "shipping_address": AddressDetails.from_dict(obj.get("shipping_address")) if obj.get("shipping_address") is not None else None,
            "billing_address": AddressDetails.from_dict(obj.get("billing_address")) if obj.get("billing_address") is not None else None,
            "cart": ExtendedCartDetails.from_dict(obj.get("cart")) if obj.get("cart") is not None else None,
            "offer": OfferExtendedDetails.from_dict(obj.get("offer")) if obj.get("offer") is not None else None
        })
        return _obj


