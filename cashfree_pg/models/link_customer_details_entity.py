# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2023-08-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator

class LinkCustomerDetailsEntity(BaseModel):
    """
    Payment link customer entity
    """
    customer_phone: StrictStr = Field(..., description="Customer phone number")
    customer_email: Optional[StrictStr] = Field(None, description="Customer email address")
    customer_name: Optional[StrictStr] = Field(None, description="Customer name")
    customer_bank_account_number: Optional[StrictStr] = Field(None, description="Customer Bank Account Number")
    customer_bank_ifsc: Optional[StrictStr] = Field(None, description="Customer Bank Ifsc")
    customer_bank_code: Optional[StrictInt] = Field(None, description="Customer Bank Code")
    __properties = ["customer_phone", "customer_email", "customer_name", "customer_bank_account_number", "customer_bank_ifsc", "customer_bank_code"]

    @validator('customer_bank_code')
    def customer_bank_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (3003, 3005, 3006, 3010, 3012, 3016, 3019, 3020, 3021, 3022, 3023, 3024, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3038, 3039, 3040, 3042, 3044, 3054, 3055, 3058, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3098, 3115, 3117, 7001):
            raise ValueError("must be one of enum values (3003, 3005, 3006, 3010, 3012, 3016, 3019, 3020, 3021, 3022, 3023, 3024, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3038, 3039, 3040, 3042, 3044, 3054, 3055, 3058, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3098, 3115, 3117, 7001)")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LinkCustomerDetailsEntity:
        """Create an instance of LinkCustomerDetailsEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> LinkCustomerDetailsEntity:
        """Create an instance of LinkCustomerDetailsEntity from a JSON string"""
        temp_dict = json.loads(json_str)
        if "customer_phone, customer_email, customer_name, customer_bank_account_number, customer_bank_ifsc, customer_bank_code" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LinkCustomerDetailsEntity:
        """Create an instance of LinkCustomerDetailsEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LinkCustomerDetailsEntity.parse_obj(obj)

        _obj = LinkCustomerDetailsEntity.parse_obj({
            "customer_phone": obj.get("customer_phone"),
            "customer_email": obj.get("customer_email"),
            "customer_name": obj.get("customer_name"),
            "customer_bank_account_number": obj.get("customer_bank_account_number"),
            "customer_bank_ifsc": obj.get("customer_bank_ifsc"),
            "customer_bank_code": obj.get("customer_bank_code")
        })
        return _obj


