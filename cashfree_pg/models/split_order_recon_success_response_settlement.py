# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2023-08-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class SplitOrderReconSuccessResponseSettlement(BaseModel):
    """
    Details of the settlement information.
    """
    entity: Optional[StrictStr] = Field(None, description="Type of entity. Example: \"settlement\".")
    cf_settlement_id: Optional[StrictInt] = Field(None, description="Unique Cashfree settlement ID.")
    cf_payment_id: Optional[StrictInt] = Field(None, description="Unique Cashfree payment ID associated with the order.")
    order_id: Optional[StrictStr] = Field(None, description="Unique identifier for the order.")
    order_currency: Optional[StrictStr] = Field(None, description="Currency of the order. Example: \"INR\".")
    transfer_id: Optional[StrictStr] = Field(None, description="Unique transfer ID if available, otherwise null.")
    order_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Total amount of the order.")
    service_charge: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Service charge for the order.")
    service_tax: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Service tax for the order.")
    settlement_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Amount to be settled after charges and tax.")
    settlement_currency: Optional[StrictStr] = Field(None, description="Currency of the settlement. Example: \"INR\".")
    transfer_utr: Optional[StrictStr] = Field(None, description="UTR (Unique Transaction Reference) for the transfer if available, otherwise null.")
    transfer_time: Optional[datetime] = Field(None, description="Time of transfer if available, otherwise null.")
    payment_time: Optional[datetime] = Field(None, description="Timestamp when payment was made.")
    __properties = ["entity", "cf_settlement_id", "cf_payment_id", "order_id", "order_currency", "transfer_id", "order_amount", "service_charge", "service_tax", "settlement_amount", "settlement_currency", "transfer_utr", "transfer_time", "payment_time"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SplitOrderReconSuccessResponseSettlement:
        """Create an instance of SplitOrderReconSuccessResponseSettlement from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> SplitOrderReconSuccessResponseSettlement:
        """Create an instance of SplitOrderReconSuccessResponseSettlement from a JSON string"""
        temp_dict = json.loads(json_str)
        if "entity, cf_settlement_id, cf_payment_id, order_id, order_currency, transfer_id, order_amount, service_charge, service_tax, settlement_amount, settlement_currency, transfer_utr, transfer_time, payment_time" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if transfer_id (nullable) is None
        # and __fields_set__ contains the field
        if self.transfer_id is None and "transfer_id" in self.__fields_set__:
            _dict['transfer_id'] = None

        # set to None if transfer_utr (nullable) is None
        # and __fields_set__ contains the field
        if self.transfer_utr is None and "transfer_utr" in self.__fields_set__:
            _dict['transfer_utr'] = None

        # set to None if transfer_time (nullable) is None
        # and __fields_set__ contains the field
        if self.transfer_time is None and "transfer_time" in self.__fields_set__:
            _dict['transfer_time'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SplitOrderReconSuccessResponseSettlement:
        """Create an instance of SplitOrderReconSuccessResponseSettlement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SplitOrderReconSuccessResponseSettlement.parse_obj(obj)

        _obj = SplitOrderReconSuccessResponseSettlement.parse_obj({
            "entity": obj.get("entity"),
            "cf_settlement_id": obj.get("cf_settlement_id"),
            "cf_payment_id": obj.get("cf_payment_id"),
            "order_id": obj.get("order_id"),
            "order_currency": obj.get("order_currency"),
            "transfer_id": obj.get("transfer_id"),
            "order_amount": obj.get("order_amount"),
            "service_charge": obj.get("service_charge"),
            "service_tax": obj.get("service_tax"),
            "settlement_amount": obj.get("settlement_amount"),
            "settlement_currency": obj.get("settlement_currency"),
            "transfer_utr": obj.get("transfer_utr"),
            "transfer_time": obj.get("transfer_time"),
            "payment_time": obj.get("payment_time")
        })
        return _obj


