# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2023-08-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from cashfree_pg.models.split_after_payment_request_split_inner_tags_inner import SplitAfterPaymentRequestSplitInnerTagsInner

class SplitAfterPaymentRequestSplitInner(BaseModel):
    """
    SplitAfterPaymentRequestSplitInner
    """
    vendor_id: Optional[StrictStr] = Field(None, description="Specify the merchant vendor ID to split the payment.")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Specify the amount to be split to the vendor.")
    percentage: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Specify the percentage of amount to be split.")
    tags: Optional[conlist(SplitAfterPaymentRequestSplitInnerTagsInner)] = Field(None, description="Provide additional data fields using tags. Sample data fields are mentioned below.")
    __properties = ["vendor_id", "amount", "percentage", "tags"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SplitAfterPaymentRequestSplitInner:
        """Create an instance of SplitAfterPaymentRequestSplitInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> SplitAfterPaymentRequestSplitInner:
        """Create an instance of SplitAfterPaymentRequestSplitInner from a JSON string"""
        temp_dict = json.loads(json_str)
        if "vendor_id, amount, percentage, tags" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SplitAfterPaymentRequestSplitInner:
        """Create an instance of SplitAfterPaymentRequestSplitInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SplitAfterPaymentRequestSplitInner.parse_obj(obj)

        _obj = SplitAfterPaymentRequestSplitInner.parse_obj({
            "vendor_id": obj.get("vendor_id"),
            "amount": obj.get("amount"),
            "percentage": obj.get("percentage"),
            "tags": [SplitAfterPaymentRequestSplitInnerTagsInner.from_dict(_item) for _item in obj.get("tags")] if obj.get("tags") is not None else None
        })
        return _obj


