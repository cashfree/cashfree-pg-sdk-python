# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2023-08-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr

class KycDetails(BaseModel):
    """
    KycDetails
    """
    account_type: Optional[StrictStr] = None
    business_type: Optional[StrictStr] = None
    uidai: Optional[Union[StrictFloat, StrictInt]] = None
    gst: Optional[StrictStr] = None
    cin: Optional[StrictStr] = None
    pan: Optional[StrictStr] = None
    passport_number: Optional[StrictStr] = None
    driving_license: Optional[StrictStr] = None
    voter_id: Optional[StrictStr] = None
    __properties = ["account_type", "business_type", "uidai", "gst", "cin", "pan", "passport_number", "driving_license", "voter_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> KycDetails:
        """Create an instance of KycDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> KycDetails:
        """Create an instance of KycDetails from a JSON string"""
        temp_dict = json.loads(json_str)
        if "account_type, business_type, uidai, gst, cin, pan, passport_number, driving_license, voter_id" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> KycDetails:
        """Create an instance of KycDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return KycDetails.parse_obj(obj)

        _obj = KycDetails.parse_obj({
            "account_type": obj.get("account_type"),
            "business_type": obj.get("business_type"),
            "uidai": obj.get("uidai"),
            "gst": obj.get("gst"),
            "cin": obj.get("cin"),
            "pan": obj.get("pan"),
            "passport_number": obj.get("passport_number"),
            "driving_license": obj.get("driving_license"),
            "voter_id": obj.get("voter_id")
        })
        return _obj


