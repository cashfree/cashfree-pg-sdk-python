# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2023-08-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from cashfree_pg.models.bank_details import BankDetails
from cashfree_pg.models.kyc_details import KycDetails
from cashfree_pg.models.schedule_option import ScheduleOption
from cashfree_pg.models.vendor_entity_related_docs_inner import VendorEntityRelatedDocsInner

class UpdateVendorResponse(BaseModel):
    """
    Update Vendor Response
    """
    email: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    bank: Optional[conlist(BankDetails)] = None
    upi: Optional[StrictStr] = None
    added_on: Optional[StrictStr] = None
    updated_on: Optional[StrictStr] = None
    vendor_type: Optional[StrictStr] = None
    account_type: Optional[StrictStr] = None
    business_type: Optional[StrictStr] = None
    phone: Optional[Union[StrictFloat, StrictInt]] = None
    name: Optional[StrictStr] = None
    vendor_id: Optional[StrictStr] = None
    schedule_option: Optional[conlist(ScheduleOption)] = None
    kyc_details: Optional[conlist(KycDetails)] = None
    dashboard_access: Optional[StrictBool] = None
    bank_details: Optional[StrictStr] = None
    related_docs: Optional[conlist(VendorEntityRelatedDocsInner)] = None
    __properties = ["email", "status", "bank", "upi", "added_on", "updated_on", "vendor_type", "account_type", "business_type", "phone", "name", "vendor_id", "schedule_option", "kyc_details", "dashboard_access", "bank_details", "related_docs"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateVendorResponse:
        """Create an instance of UpdateVendorResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> UpdateVendorResponse:
        """Create an instance of UpdateVendorResponse from a JSON string"""
        temp_dict = json.loads(json_str)
        if "email, status, bank, upi, added_on, updated_on, vendor_type, account_type, business_type, phone, name, vendor_id, schedule_option, kyc_details, dashboard_access, bank_details, related_docs" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in bank (list)
        _items = []
        if self.bank:
            for _item in self.bank:
                if _item:
                    _items.append(_item.to_dict())
            _dict['bank'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in schedule_option (list)
        _items = []
        if self.schedule_option:
            for _item in self.schedule_option:
                if _item:
                    _items.append(_item.to_dict())
            _dict['schedule_option'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in kyc_details (list)
        _items = []
        if self.kyc_details:
            for _item in self.kyc_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['kyc_details'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in related_docs (list)
        _items = []
        if self.related_docs:
            for _item in self.related_docs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['related_docs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateVendorResponse:
        """Create an instance of UpdateVendorResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateVendorResponse.parse_obj(obj)

        _obj = UpdateVendorResponse.parse_obj({
            "email": obj.get("email"),
            "status": obj.get("status"),
            "bank": [BankDetails.from_dict(_item) for _item in obj.get("bank")] if obj.get("bank") is not None else None,
            "upi": obj.get("upi"),
            "added_on": obj.get("added_on"),
            "updated_on": obj.get("updated_on"),
            "vendor_type": obj.get("vendor_type"),
            "account_type": obj.get("account_type"),
            "business_type": obj.get("business_type"),
            "phone": obj.get("phone"),
            "name": obj.get("name"),
            "vendor_id": obj.get("vendor_id"),
            "schedule_option": [ScheduleOption.from_dict(_item) for _item in obj.get("schedule_option")] if obj.get("schedule_option") is not None else None,
            "kyc_details": [KycDetails.from_dict(_item) for _item in obj.get("kyc_details")] if obj.get("kyc_details") is not None else None,
            "dashboard_access": obj.get("dashboard_access"),
            "bank_details": obj.get("bank_details"),
            "related_docs": [VendorEntityRelatedDocsInner.from_dict(_item) for _item in obj.get("related_docs")] if obj.get("related_docs") is not None else None
        })
        return _obj


