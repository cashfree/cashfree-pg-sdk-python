# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2023-08-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from cashfree_pg.models.static_split_response_scheme_inner import StaticSplitResponseSchemeInner

class StaticSplitResponse(BaseModel):
    """
    Static Split Response
    """
    active: Optional[StrictBool] = None
    terminal_id: Optional[StrictStr] = None
    terminal_reference_id: Optional[Union[StrictFloat, StrictInt]] = None
    product_type: Optional[StrictStr] = None
    scheme: Optional[conlist(StaticSplitResponseSchemeInner)] = None
    added_on: Optional[StrictStr] = None
    __properties = ["active", "terminal_id", "terminal_reference_id", "product_type", "scheme", "added_on"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StaticSplitResponse:
        """Create an instance of StaticSplitResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> StaticSplitResponse:
        """Create an instance of StaticSplitResponse from a JSON string"""
        temp_dict = json.loads(json_str)
        if "active, terminal_id, terminal_reference_id, product_type, scheme, added_on" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in scheme (list)
        _items = []
        if self.scheme:
            for _item in self.scheme:
                if _item:
                    _items.append(_item.to_dict())
            _dict['scheme'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StaticSplitResponse:
        """Create an instance of StaticSplitResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StaticSplitResponse.parse_obj(obj)

        _obj = StaticSplitResponse.parse_obj({
            "active": obj.get("active"),
            "terminal_id": obj.get("terminal_id"),
            "terminal_reference_id": obj.get("terminal_reference_id"),
            "product_type": obj.get("product_type"),
            "scheme": [StaticSplitResponseSchemeInner.from_dict(_item) for _item in obj.get("scheme")] if obj.get("scheme") is not None else None,
            "added_on": obj.get("added_on")
        })
        return _obj


