# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2023-08-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt
from cashfree_pg.models.balance_details import BalanceDetails
from cashfree_pg.models.charges_details import ChargesDetails
from cashfree_pg.models.transfer_details import TransferDetails

class AdjustVendorBalanceResponse(BaseModel):
    """
    Adjust Vendor Balance Response
    """
    settlement_id: Optional[Union[StrictFloat, StrictInt]] = None
    transfer_details: Optional[TransferDetails] = None
    balances: Optional[BalanceDetails] = None
    charges: Optional[ChargesDetails] = None
    __properties = ["settlement_id", "transfer_details", "balances", "charges"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AdjustVendorBalanceResponse:
        """Create an instance of AdjustVendorBalanceResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> AdjustVendorBalanceResponse:
        """Create an instance of AdjustVendorBalanceResponse from a JSON string"""
        temp_dict = json.loads(json_str)
        if "settlement_id, transfer_details, balances, charges" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of transfer_details
        if self.transfer_details:
            _dict['transfer_details'] = self.transfer_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of balances
        if self.balances:
            _dict['balances'] = self.balances.to_dict()
        # override the default output from pydantic by calling `to_dict()` of charges
        if self.charges:
            _dict['charges'] = self.charges.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdjustVendorBalanceResponse:
        """Create an instance of AdjustVendorBalanceResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AdjustVendorBalanceResponse.parse_obj(obj)

        _obj = AdjustVendorBalanceResponse.parse_obj({
            "settlement_id": obj.get("settlement_id"),
            "transfer_details": TransferDetails.from_dict(obj.get("transfer_details")) if obj.get("transfer_details") is not None else None,
            "balances": BalanceDetails.from_dict(obj.get("balances")) if obj.get("balances") is not None else None,
            "charges": ChargesDetails.from_dict(obj.get("charges")) if obj.get("charges") is not None else None
        })
        return _obj


