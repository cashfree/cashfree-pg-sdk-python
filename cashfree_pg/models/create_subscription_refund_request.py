# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2023-08-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class CreateSubscriptionRefundRequest(BaseModel):
    """
    Request body to create a subscription refund.
    """
    subscription_id: StrictStr = Field(..., description="A unique ID passed by merchant for identifying the subscription.")
    payment_id: Optional[StrictStr] = Field(None, description="A unique ID passed by merchant for identifying the transaction.")
    cf_payment_id: Optional[StrictStr] = Field(None, description="Cashfree subscription payment reference number.")
    refund_id: StrictStr = Field(..., description="A unique ID passed by merchant for identifying the refund.")
    refund_amount: Union[StrictFloat, StrictInt] = Field(..., description="The amount to be refunded. Can be partial or full amount of the payment.")
    refund_note: Optional[StrictStr] = Field(None, description="Refund note.")
    refund_speed: Optional[StrictStr] = Field(None, description="Refund speed. Can be INSTANT or STANDARD. UPI supports only STANDARD refunds, Enach and Pnach supports only INSTANT refunds.")
    __properties = ["subscription_id", "payment_id", "cf_payment_id", "refund_id", "refund_amount", "refund_note", "refund_speed"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateSubscriptionRefundRequest:
        """Create an instance of CreateSubscriptionRefundRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> CreateSubscriptionRefundRequest:
        """Create an instance of CreateSubscriptionRefundRequest from a JSON string"""
        temp_dict = json.loads(json_str)
        if "subscription_id, payment_id, cf_payment_id, refund_id, refund_amount, refund_note, refund_speed" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateSubscriptionRefundRequest:
        """Create an instance of CreateSubscriptionRefundRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateSubscriptionRefundRequest.parse_obj(obj)

        _obj = CreateSubscriptionRefundRequest.parse_obj({
            "subscription_id": obj.get("subscription_id"),
            "payment_id": obj.get("payment_id"),
            "cf_payment_id": obj.get("cf_payment_id"),
            "refund_id": obj.get("refund_id"),
            "refund_amount": obj.get("refund_amount"),
            "refund_note": obj.get("refund_note"),
            "refund_speed": obj.get("refund_speed")
        })
        return _obj


