# coding: utf-8

"""
    Cashfree Payment Gateway APIs

    Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

    The version of the OpenAPI document: 2022-09-01
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from cashfree_pg.models.payment_entity import PaymentEntity
from cashfree_pg.models.w_hcustomer_details import WHcustomerDetails
from cashfree_pg.models.w_horder import WHorder

class WHdata(BaseModel):
    """
    webhook object
    """
    order: Optional[WHorder] = None
    payment: Optional[PaymentEntity] = None
    customer_details: Optional[WHcustomerDetails] = None
    __properties = ["order", "payment", "customer_details"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WHdata:
        """Create an instance of WHdata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of order
        if self.order:
            _dict['order'] = self.order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment
        if self.payment:
            _dict['payment'] = self.payment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_details
        if self.customer_details:
            _dict['customer_details'] = self.customer_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WHdata:
        """Create an instance of WHdata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WHdata.parse_obj(obj)

        _obj = WHdata.parse_obj({
            "order": WHorder.from_dict(obj.get("order")) if obj.get("order") is not None else None,
            "payment": PaymentEntity.from_dict(obj.get("payment")) if obj.get("payment") is not None else None,
            "customer_details": WHcustomerDetails.from_dict(obj.get("customer_details")) if obj.get("customer_details") is not None else None
        })
        return _obj


